package com.cntt2.logistics.configuration;

import com.cntt2.logistics.entity.*;
import com.cntt2.logistics.repository.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import jakarta.transaction.Transactional;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

@Component
public class DriverAssignmentConfig {

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private DriverWorkScheduleRepository scheduleRepository;

    /**
        M·ªói gi·ªù ch·∫°y 1 l·∫ßn theo th·ªùi gian th·ª±c
     */
    @Scheduled(cron = "0 0 * * * *") // 1 gi·ªù
    @Transactional
    public void assignDriversEveryHour() {
        System.out.println("üîÑ Running driver assignment task...");

        List<Order> createdOrders = orderRepository.findByStatus(OrderStatus.CREATED);
        assignDriverToOrders(createdOrders, true);

        List<Order> arrivedOrders = orderRepository.findByStatus(OrderStatus.AT_DESTINATION);
        assignDriverToOrders(arrivedOrders, false);
    }

    private void assignDriverToOrders(List<Order> orders, boolean isPickup) {
        // S·∫Øp x·∫øp ƒë∆°n h√†ng theo ng√†y t·∫°o (l√¢u h∆°n ƒëi tr∆∞·ªõc)
        PriorityQueue<Order> orderQueue = new PriorityQueue<>(Comparator.comparing(Order::getCreatedAt));
        orderQueue.addAll(orders);

        // L·∫•y danh s√°ch t√†i x·∫ø theo warehouse & tr·∫°ng th√°i approved
        Map<String, List<DriverWorkSchedule>> schedulesByWarehouse = new HashMap<>();

        while (!orderQueue.isEmpty()) {
            Order order = orderQueue.poll();

            String warehouseId = isPickup
                    ? order.getSourceWarehouse().getId()
                    : order.getDestinationWarehouse().getId();

            double weight = order.getWeight();
            VehicleType requiredVehicleType;

            if (weight <= 15) {
                requiredVehicleType = VehicleType.MOTORBIKE;
            } else if (weight < 100) {
                requiredVehicleType = VehicleType.VAN;
            } else {
                requiredVehicleType = VehicleType.TRUCK;
            }

            // L·∫•y danh s√°ch t√†i x·∫ø c·ªßa warehouse n√†y (cached n·∫øu ƒë√£ l·∫•y)
            List<DriverWorkSchedule> availableSchedules = schedulesByWarehouse.computeIfAbsent(warehouseId, id ->
                    scheduleRepository.findByWarehouseIdAndStatusAndWorkDate(
                            warehouseId,
                            ScheduleStatus.APPROVED,
                            LocalDate.now()
                    )
            );

            // L·ªçc t√†i x·∫ø c√≥ vehicle ph√π h·ª£p
            List<Driver> suitableDrivers = availableSchedules.stream()
                    .map(DriverWorkSchedule::getDriver)
                    .filter(driver -> driver.getVehicleType() == requiredVehicleType)
                    .collect(Collectors.toList());

            // T·∫°o map l∆∞u s·ªë ƒë∆°n h√†ng ƒë√£ giao cho m·ªói t√†i x·∫ø h√¥m nay
            Map<String, Long> driverAssignedCount = getDriverAssignedCount(suitableDrivers, isPickup);

            // T√¨m t√†i x·∫ø ph√π h·ª£p ch∆∞a ƒë·∫°t gi·ªõi h·∫°n 50 ƒë∆°n/ng√†y
            Optional<Driver> selectedDriverOpt = suitableDrivers.stream()
                    .filter(driver -> driverAssignedCount.getOrDefault(driver.getId(), 0L) < 50)
                    .findFirst();

            if (selectedDriverOpt.isPresent()) {
                Driver driver = selectedDriverOpt.get();

                if (isPickup) {
                    order.setPickupDriver(driver);
                    order.setStatus(OrderStatus.ASSIGNED_TO_SHIPPER);
                    System.out.println("‚úî Assigned pickupDriver (" + driver.getId() + ") to order " + order.getTrackingCode());
                } else {
                    order.setDeliveryDriver(driver);
                    order.setStatus(OrderStatus.OUT_FOR_DELIVERY);
                    System.out.println("‚úî Assigned deliveryDriver (" + driver.getId() + ") to order " + order.getTrackingCode());
                }

                orderRepository.save(order);
            } else {
                String driverType = isPickup ? "pickupDriver" : "deliveryDriver";
                System.out.println("‚úñ No suitable " + driverType + " with capacity < 50 for order " + order.getTrackingCode()
                        + " at warehouse " + warehouseId + " with vehicle: " + requiredVehicleType);
            }
        }
    }

    /**
     * L·∫•y s·ªë l∆∞·ª£ng ƒë∆°n h√†ng ƒë√£ giao cho t·ª´ng t√†i x·∫ø trong ng√†y h√¥m nay, t√πy lo·∫°i driver: pickup ho·∫∑c delivery
     * N·∫øu c·∫ßn, g·ªçi l·∫°i DB ƒë·ªÉ ƒë·∫øm ho·∫∑c ƒë·∫øm trong cache n·∫øu d·ªØ li·ªáu c√≥ s·∫µn.
     */
    private Map<String, Long> getDriverAssignedCount(List<Driver> drivers, boolean isPickup) {
        List<String> driverIds = drivers.stream().map(Driver::getId).toList();
        LocalDate today = LocalDate.now();

        // Gi·∫£ s·ª≠ orderRepository c√≥ method ƒë·∫øm s·ªë ƒë∆°n h√†ng ƒë∆∞·ª£c giao cho t√†i x·∫ø ng√†y h√¥m nay
        // Theo ki·ªÉu: countByPickupDriverIdAndCreatedDate or countByDeliveryDriverIdAndCreatedDate

        Map<String, Long> counts = new HashMap<>();

        for (String driverId : driverIds) {
            long count;
            if (isPickup) {
                count = orderRepository.countByPickupDriverIdAndCreatedDate(driverId, today);
            } else {
                count = orderRepository.countByDeliveryDriverIdAndCreatedDate(driverId, today);
            }
            counts.put(driverId, count);
        }

        return counts;
    }
}
